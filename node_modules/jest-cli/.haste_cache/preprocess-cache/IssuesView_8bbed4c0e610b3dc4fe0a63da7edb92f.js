'use strict';Object.defineProperty(exports, '__esModule', { value: true }); // istanbul ignore next
function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _react = require('react');var _react2 = _interopRequireDefault(_react);var _reactRouter = require('react-router');var _reactRouter2 = _interopRequireDefault(_reactRouter);var _IssueStoreJs = require(


'../IssueStore.js');var _IssueStoreJs2 = _interopRequireDefault(_IssueStoreJs);var $ = require('jquery');

var apiStart = 0;
var apiEnd = 25;

var IssuesView = _react2['default'].createClass({ displayName: 'IssuesView', 

  getInitialState: function getInitialState() {
    return { 
      issues: _IssueStoreJs2['default'].getIssuesRange(apiStart, apiEnd), 
      loading: true };}, 



  componentWillMount: function componentWillMount() {
    _IssueStoreJs2['default'].init();}, 


  componentDidMount: function componentDidMount() {
    var self = this;
    _IssueStoreJs2['default'].addChangeListener(this.updateIssues);
    $(window).scroll(function () {
      var currentBottom = 0;
      if ($(window).scrollTop() + $(window).height() == $(document).height() && $(window).scrollTop()) {
        if (_IssueStoreJs2['default'].getIssues().length > apiEnd) {
          apiEnd = apiEnd + 25;
          self.updateIssues();}}});}, 






  componentWillRecieveProps: function componentWillRecieveProps(nextProps) {
    console.log('next props: ', nextProps);}, 


  componentWillUnmount: function componentWillUnmount() {
    _IssueStoreJs2['default'].removeChangeListener(this.updateIssues);}, 


  updateIssues: function updateIssues() {
    if (!this.isMounted()) 
    return;
    console.log('close one');
    this.setState({ 
      issues: _IssueStoreJs2['default'].getIssuesRange(apiStart, apiEnd), 
      loading: false });}, 



  summaryBlurb: function summaryBlurb(summary) {
    var endpoint = 140;
    if (summary.length <= endpoint) {
      return summary;}

    //if character after last character of string not a blank space, keep going

    while (summary[endpoint + 1] && summary[endpoint + 1] !== ' ') {

      endpoint++;}


    return summary.substr(0, endpoint + 1);}, 


  render: function render() {
    var self = this;
    var detailIssueURL = 'issues/';
    var issues = this.state.issues ? this.state.issues.map(function (issue) {
      var issueLabels = issue.labels.map(function (label) {
        var labelColor = '#' + label.color;
        return _react2['default'].createElement('p', { style: { display: "inline", color: labelColor, fontSize: "12.5" } }, ' ', label.name);});

      return (
        _react2['default'].createElement('div', { key: issue.number, style: styles.issue }, 
        _react2['default'].createElement('p', { style: styles.issue_number }, '#', issue.number), 
        _react2['default'].createElement('div', { style: styles.issue_icon_holder }, 
        _react2['default'].createElement('div', { style: styles.issue_icon.style(issue.user.avatar_url) })), 

        _react2['default'].createElement('div', { style: styles.issue_content }, 
        _react2['default'].createElement('p', { style: styles.issue_title }, issue.title), 
        _react2['default'].createElement('p', { style: styles.issue_username }, '@', issue.user.login), 
        issueLabels, 
        _react2['default'].createElement(_reactRouter.Link, { to: 'issues/' + issue.number, style: styles.link }, 
        _react2['default'].createElement('p', { style: styles.issue_summary }, self.summaryBlurb(issue.body)), '...'))));}) : 




    _react2['default'].createElement('p', null, ' There are no issues to display ');

    return (
      _react2['default'].createElement('div', null, 
      _react2['default'].createElement('div', { style: styles.header }, ' GithubIssueViewer.js ', _react2['default'].createElement('img', { src: '../../assets/githubicon.png', width: '25px', height: '25px' }, ' '), ' '), 
      _react2['default'].createElement('div', { id: 'issuesContainer', style: styles.issues }, 

      issues)));} });







//issues styles
var styles = { 
  header: { 
    backgroundColor: 'white', 
    opacity: ".78", 
    top: 0, 
    width: '100%', 
    height: '15%', 
    paddingTop: '10', 
    paddingBottom: '10', 
    fontSize: 24, 
    fontFamily: 'Tahoma', 
    textAlign: 'center', 
    color: '#f2b632', 
    marginBottom: "25" }, 

  link: { 
    color: "#A9A9A9", 
    textDecoration: "none" }, 


  issue: { 
    marginTop: 30, 
    marginLeft: 50, 
    marginRight: 50, 
    background: 'white' }, 

  issue_content: { 
    marginLeft: 10, 
    paddingTop: 10, 
    paddingBottom: 30 }, 

  issue_title: { 
    color: '#252839', 
    fontSize: 18, 
    fontWeight: 'bold' }, 

  issue_icon_holder: { 
    width: 55, 
    float: 'left', 
    marginTop: 21, 
    marginBottom: 20, 
    marginRight: 15, 
    marginLeft: 25 }, 

  issue_icon: { 
    style: function style(avatar_url) {
      return { 
        width: 55, 
        height: 55, 
        borderRadius: 100, 
        float: 'left', 
        backgroundImage: 'url(' + avatar_url + ')', 
        backgroundSize: 'cover', 
        WebkitBoxShadow: "0 1px 2px rgba(0,0,0,0.3)" };} }, 




  issue_number: { 
    float: 'right', 
    fontSize: 14, 
    marginRight: 10, 
    marginTop: 5, 
    color: '#252839' }, 

  issue_username: { 
    fontSize: 16, 
    marginLeft: 40, 
    fontStyle: 'italic', 
    color: '#677077' }, 

  issue_summary: { 
    fontSize: 14, 
    color: '#A9A9A9' } };exports['default'] = 







IssuesView;module.exports = exports['default'];